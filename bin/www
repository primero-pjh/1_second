#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('1-second:server');
const http = require('http');
const { encode, decode } = require("base64-arraybuffer");
const knex = require('../db');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
let user_list = new Array();
let user_dict = new Object();

const io = require("socket.io")(server, {
	cors: { 
		origin: [
			"*",
			"http://localhost:8080",
			"https://localhost:8080",
			"http://localhost:3000",
			"https://localhost:3000",
			"https://admin.pritras.com",
			"https://ybr.pritras.com"
		],
	}
});

function _arrayBufferToBase64( buffer ) {
    var binary = '';
    var bytes = new Uint8Array( buffer );
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
        binary += String.fromCharCode( bytes[ i ] );
    }
    return window.btoa( binary );
}

async function socket_connection(name) {
	let rc = await knex.table('rc').where("name", name).first();
	if(rc) { return; }

	await knex.table('rc').insert({
		name: name,
		dateAdded: new Date(),
		dateRecent: new Date(),
	});
}

io.on("connection", async (socket) => { 
	// console.log("connection -> ", socket.id);
	let headers = socket.handshake;
	let auth = socket.handshake.auth;
	if(auth.hasOwnProperty('type')) {
		let type = auth.type;
		if(user_dict.hasOwnProperty(type) == false)  {
			user_dict[type] = [];
		}
		if(user_dict.hasOwnProperty(type) == true)  {
			user_dict[type].push({
				id: socket.id,
				name: auth.name,
				type: auth.type,
				password: auth.password,
			});
		}
		if(type == 'admin') {
			socket.join("admin");
		} else if (type == 'client') {
			socket.join("client");
		}
		io.to("admin").emit("/client/admin/connection");
		io.to("client").emit("/client/connection", user_dict);
	}

	socket.emit('connection', socket.id);

	
	
	/* RaspberryPI 에서 DHT11의 정보를 읽어온다 */
	socket.on("read_dht", (data) => {
		io.emit('/client/read_dht', {
			temperature: data.temperature,
			humidity: data.humidity,
		});
	});
	
	/* RaspberryPI 에서 CAM의 정보를 읽어온다 */
	socket.on("read_image", (data) => {
		io.emit('/client/read_image', encode(data));
	});
	/* RaspberryPI 에서 CAM의 정보를 특정 socket에게 전달한다. */
	socket.on("/socket/send/image", (data) => {
		// io.to(data.other).emit('/client/read_image', encode(data));
		io.to(data.other).emit('/client/read_image', (data.base64));
		io.to("admin").emit('/client/admin/read_image', data);
	});
	/* socket에 접속한 모든 유저를 들고온다 */
	socket.on("/socket/get/user", async (data, callback) => {
        callback({
            success: 1,
			user_dict,
        });
        return;
    });

	/* client에서 연결하고 비밀번호까지 인증하였을 때 */
	socket.on("/socket/connect", async (data, callback) => {
		let rc_idx = user_dict['rc'].findIndex(x=>x.id==data.other);
		if(rc_idx >= 0) {
			user_dict['rc'][rc_idx]['other'] = data.own;
			let date = new Date();
			date.setTime(date.getTime());
			user_dict['rc'][rc_idx]['connection_time'] = date;
		}
		let client_idx = user_dict['client'].findIndex(x=>x.id==data.own);
		if(client_idx >= 0) {
			user_dict['client'][client_idx]['other'] = data.other;
		}
		io.to(data.other).emit('/client/connect', {
			socketId: data.own
		});
		io.to("admin").emit('/client/admin/connection');
		socket_connection(data.name);
		return callback({
			success: 1
		});
	});

	/* rc car controll code */
	socket.on("/socket/rc/move", async (data) => {
		io.emit("/socket/rc/move", data);
		return;
	});

	/* connection user return code */
	socket.on("/socket/rc", async (data, callback) => {
		let type = data.type;
		let rc_list = [];
		if(user_dict.hasOwnProperty('rc')) {
			rc_list = user_dict['rc'];
			return callback({
				rc_list,
			});
		} else {
			return callback({
				rc_list: [],
			});
		}
		
	});

	/* disconnect */
	socket.on('disconnect', () => {
		let socketId = socket.id;
		let auth = socket.handshake.auth;
		let idx = user_dict[auth.type].findIndex(x=>x.id == socketId);
		let sck = '';
		if(idx >= 0) {
			sck = user_dict[auth.type][idx];
			user_dict[auth.type].splice(idx, 1);
		}
		io.to("admin").emit("/client/admin/connection");
		io.to("client").emit("/client/connection", user_dict);
		if(sck.hasOwnProperty('other')) {
			io.to(sck.other).emit("/client/disconnection");
		}
		//console.log("disconnect-socketId:", socketId);
	});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
	// named pipe
	return val;
  }

  if (port >= 0) {
	// port number
	return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
	throw error;
  }

  var bind = typeof port === 'string'
	? 'Pipe ' + port
	: 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
	case 'EACCES':
	  process.exit(1);
	  break;
	case 'EADDRINUSE':
	  process.exit(1);
	  break;
	default:
	  throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
	? 'pipe ' + addr
	: 'port ' + addr.port;
  debug('Listening on ' + bind);
}
