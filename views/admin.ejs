<!DOCTYPE html>
<html>
	<head>
        <meta name="viewport" content="user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" />
		<title>관리자 페이지</title>
        <link href="./stylesheets/style.css?ver=1.0" rel="stylesheet" type="text/css" />
        <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons" rel="stylesheet" 
            type="text/css">
        <link href="https://cdn.jsdelivr.net/npm/quasar@2.11.10/dist/quasar.prod.css" rel="stylesheet" type="text/css">
	</head>
	<body>
        <div id="app">
            <q-layout view="lHh LpR lff"
                container :style="{height: height + 'px'}"
                class="shadow-2 rounded-borders" >
                <q-header reveal class="bg-white text-black shadow-2">
                    <q-toolbar>
                        <q-toolbar-title>
                            <div style="padding-left: 16px;">{{select_label}}</div>
                        </q-toolbar-title>
                        <q-btn icon="person" label="account" flat>
                            <q-menu>
                                <q-list>
                                    <q-item clickable v-close-popup @click="logout">
                                        <q-item-section>로그아웃</q-item-section>
                                    </q-item>
                                </q-list>
                            </q-menu>
                        </q-btn>
                    </q-toolbar>
                </q-header>
    
                <q-drawer v-model="drawerLeft" class="bg-dark text-white" :width="230">
                    <div style="height: 50px; display: flex; align-items: center;">
                        <div class="text-h6" style="padding-left: 18px;">1_SECOND</div>
                    </div>
                    <q-list bordered separator class="rounded-borders">
                        <template v-for="(row, idx) in lefts">
                            <template v-if="row.childrens.length > 0">
                                <q-expansion-item >
                                    <template v-slot:header>
                                        <q-item-section avatar>
                                            <q-icon :name="row.icon"></q-icon>
                                        </q-item-section>
                                        <q-item-section>
                                            {{row.label}}
                                        </q-item-section>
                                    </template>
                            
                                    <q-card class="bg-dark text-white" style="padding: 0; margin: 0;">
                                        <q-card-section style="padding: 0; padding-left: 20px; margin: 0;">
                                            <q-list bordered separator class="rounded-borders" style="padding: 0; margin: 0;">
                                                <template v-for="item in row.childrens">
                                                    <q-item clickable @click="clickTab(item)">
                                                        <q-item-section avatar>
                                                            <q-icon :name="item.icon"></q-icon>
                                                        </q-item-section>
                                                        <q-item-section>{{item.label}}</q-item-section>
                                                    </q-item>
                                                </template>
                                            </q-list>
                                        </q-card-section>
                                    </q-card>
                                </q-expansion-item>
                            </template>
                            <template v-else>
                                <q-item clickable v-ripple @click="clickTab(row)">
                                    <q-item-section avatar>
                                        <q-icon  :name="row.icon"></q-icon>
                                    </q-item-section>
                                    <q-item-section>{{row.label}}</q-item-section>
                                </q-item>
                            </template>
                        </template>
                        
                        <q-separator></q-separator>
                    </q-list>
                </q-drawer>
    
                <q-page-container>
                    <q-page class="bg-grey-12 q-pa-sm" :style="{height: ( height - 50 )+'px'}">
                        <q-tab-panels v-model="tab" animated  class="bg-grey-12" keep-alive>
                            <q-tab-panel name="dashboards">
                                <div style="width: 100%;">
                                    <div class="row">
                                        <div class="col-6">
                                            <q-card>
                                                <q-card-section>
                                                    <div class="text-h6">접속자 현황</div>
                                                    <div style="display: flex; justify-content: center;">
                                                        <div style="width: 450px; ">
                                                            <div id="chart_box">
                                                                <canvas id="myChart" ref="myChart"></canvas>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </q-card-section>
                                            </q-card>
                                        </div>
                                        <div class="q-pl-md col-6">
                                            <q-card>
                                                <q-card-section>
                                                    <div>
                                                        <div class="text-h6">접속 탐지로봇 통계</div>
                                                        <div class="text-grey">
                                                            * 해당 탐지로봇을 클릭하면 아래 상세내용을 볼 수 있습니다. *
                                                        </div>
                                                    </div>
                                                    <q-table class="my-sticky-header-column-table" flat bordered
                                                        :rows="rc_list"
                                                        :columns="columns"
                                                        row-key="name"
                                                        no-data-label="현재 접속한 탐지로봇이 없습니다."
                                                        @row-click="clickRow"
                                                        :pagination="initialPagination"
                                                    >
                                                        <template v-slot:body="props">
                                                            <q-tr :props="props" @click="clickRow(props.row)">
                                                                <q-td key="name" :props="props">
                                                                    <div class="text-bold">{{ props.row.name }}</div>
                                                                </q-td>
                                                                <q-td key="id" :props="props">
                                                                    <div>{{ props.row.id }}</div>
                                                                </q-td>
                                                                <q-td key="connection_time_view" :props="props">
                                                                    <template v-if="props.row.hasOwnProperty('connection_time_view')">
                                                                        {{props.row.connection_time_view}}
                                                                    </template>
                                                                    <template v-else>
                                                                        no connection
                                                                    </template>
                                                                </q-td>
                                                                <q-td key="time" :props="props">
                                                                    {{props.row.time}}
                                                                </q-td>
                                                            </q-tr>
                                                        </template>
                                                    </q-table>
                                                </q-card-section>
                                            </q-card>
                                        </div>
                                    </div>
                                    <div class="row q-mt-md" style="width: 100%;" >
                                        <q-card style="width: 100%;">
                                            <q-card-section>
                                                <template v-if="select_robot">
                                                    <div>
                                                        <div class="text-h6">탐지로봇 {{select_robot.name}}의 상세내역</div>
                                                        <div>
                                                            <q-table class="my-sticky-header-column-table" flat bordered
                                                                :rows="record_list"
                                                                :columns="record_columns"
                                                                row-key="name"
                                                                :pagination="initialPagination">
                                                                <template v-slot:body="props">
                                                                    <q-tr :props="props">
                                                                        <q-td key="name" :props="props">
                                                                            {{ props.row.image }}
                                                                        </q-td>
                                                                        <q-td key="temperature" :props="props">
                                                                            {{ props.row.temperature }}
                                                                        </q-td>
                                                                        <q-td key="humidity" :props="props">
                                                                            {{ props.row.humidity }}
                                                                        </q-td>
                                                                        <q-td key="latitude" :props="props">
                                                                            {{ props.row.latitude }}
                                                                        </q-td>
                                                                        <q-td key="longitude" :props="props">
                                                                            {{ props.row.longitude }}
                                                                        </q-td>
                                                                        <q-td key="dateAdded" :props="props">
                                                                            {{ props.row.dateAdded }}
                                                                        </q-td>
                                                                    </q-tr>
                                                                </template>
                                                            </q-table>
                                                        </div>
                                                    </div>
                                                </template>
                                                <template v-else>
                                                    <div class="text-h6 text-center">선택된 탐지로봇이 없습니다.</div>
                                                </template>
                                            </q-card-section>
                                        </q-card>
                                    </div>
                                </div>
                            </q-tab-panel>
                            <q-tab-panel name="monitoring">
                                <q-card>
                                    <q-card-section>
                                        <div style="display: flex; flex-wrap: wrap;">
                                            <template v-for="socket in socket_list">
                                                <q-card style="min-width: 270px;" class="q-mr-md q-mb-md" v-if="socket.type == 'rc'">
                                                    <template v-if="socket.image">
                                                        <img :src="socket.image" style="width: 270px;" />
                                                    </template>
                                                    <template v-else>
                                                        <div>
                                                            <div style="width: 270px;
                                                            height: 202px;">
                                                            <span  class="text-h6" 
                                                                style="position: absolute; top: 50%; left: 50%; 
                                                                    transform: translate(-50%, -50%);">
                                                                DISCONNECTION
                                                            </span>
                                                            </div>
                                                        </div>
                                                    </template>
                                                    
                                              
                                                    <q-card-actions>
                                                        <q-btn flat :label="socket.name"></q-btn>
                                                        <q-space></q-space>
                                                        <q-btn v-if="socket.image" flat color="negative" disable label="disconnect"></q-btn>
                                                    </q-card-actions>
                                                </q-card>
                                            </template>
                                        </div>
                                    </q-card-section>
                                </q-card>
                            </q-tab-panel>
                            <q-tab-panel name="rc_database">
                                <q-card>
                                    <q-card-section>
                                        <div class="row">
                                            <div class="col-12">
                                                <q-table class="my-sticky-header-column-table" flat bordered
                                                    :rows="rc_data_list"
                                                    :columns="rc_columns"
                                                    row-key="name"
                                                    no-data-label="등록된 탐지로봇이 없습니다."
                                                    :pagination="initialPagination"
                                                >
                                                    <template v-slot:body="props">
                                                        <q-tr :props="props">
                                                            <q-td key="name" :props="props">
                                                                <div class="text-bold">{{ props.row.name }}</div>
                                                            </q-td>
                                                            <q-td key="dateAdded" :props="props">
                                                                {{ props.row.dateAdded }}
                                                            </q-td>
                                                            <q-td key="dateRecent" :props="props">
                                                                {{ props.row.dateRecent }}
                                                            </q-td>
                                                            <q-td key="buttons" :props="props">
                                                                <q-btn icon="delete" dense size="sm" color="negative" 
                                                                    @click="delete_rc(props.row)"></q-btn>
                                                            </q-td>
                                                        </q-tr>
                                                    </template>
                                                </q-table>
                                            </div>
                                        </q-card-section>
                                    </q-card>
                                </div>
                            </q-tab-panel>
                        </q-tab-panels>
                    </q-page>
                </q-page-container>
            </q-layout>
        </div>
	</body>
</html>
<style>
    .my-sticky-header-column-table {
        min-height: 429px;
        /* max-width: 600px; */
    }
    .my-sticky-header-column-table thead tr:first-child th:first-child {
        background-color: #eee;
    }
    .my-sticky-header-column-table th:first-child, td:first-child {
        background-color: #eee;
        position: sticky !important;
        left: 0;
        z-index: 1;
    }
    .activeCell {
        background-color: red;
    }
</style>
<script src="/javascripts/common.js"></script>
<script src="https://unpkg.com/vue@3"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.6.0/socket.io.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quasar@2.11.10/dist/quasar.umd.prod.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>
    const app = Vue.createApp({
        data() {
            return {
                ctx: null,
                // tab: 'monitoring',
                tab: 'dashboards',
                select_label: '대시보드',
                select_robot: '',
                height: 0,
                socket: null,

                rc_data_list: [],
                rc_list: [],
                rc_columns: [
                    { name: 'name', required: true, label: '탐지로봇명', align: 'left', field: 'name', sortable: true },
                    { name: 'dateAdded', align: 'left', label: '등록일', field: 'dateAdded', sortable: true },
                    { name: 'dateRecent', align: 'left', label: '최근접속일', field: 'dateRecent', sortable: true },
                    { name: 'buttons', align: 'left', label: '기능', field: '', sortable: false },
                ],

                record_list: [],
                record_columns: [
                    { name: 'image', align: 'left', label: '이미지', field: 'image', sortable: true },
                    { name: 'temperature', align: 'left', label: '온도(temp)', field: 'temperature', sortable: true },
                    { name: 'humidity', align: 'left', label: '습도(hum)', field: 'humidity', sortable: true },
                    { name: 'latitude', align: 'left', label: '위도(lat)', field: 'latitude', sortable: true },
                    { name: 'longitude', align: 'left', label: '경도(long)', field: 'longitude', sortable: true },
                    { name: 'dateAdded', align: 'left', label: '날짜', field: 'dateAdded', sortable: true },
                ],
                initialPagination: {
                    sortBy: 'desc',
                    descending: false,
                    page: 1,
                    rowsPerPage: 0,
                },
                
                rows: [],
                columns: [
                    { name: 'name', required: true, label: '탐지로봇명', align: 'left', field: 'name', sortable: true },
                    { name: 'id', align: 'left', label: '소켓번호', field: 'id', sortable: true },
                    { name: 'connection_time_view', align: 'left', label: '접속 시각', field: 'connection_time_view', sortable: true },
                    { name: 'time', align: 'left', label: '경과 시간', field: 'time', sortable: false },
                ],

                drawerLeft: true,
                drawerRight: false,

                lefts: [
                    { icon: 'dashboard', tab: 'dashboards', label: '대시보드', childrens: [], is_selected: true },
                    { icon: 'person', tab: 'user', label: '사용자 관리', is_selected: false, childrens: [
                        { icon: 'directions_car', tab: 'rc_database', label: 'RC Database', is_selected: true },
                        { icon: 'monitor', tab: 'monitoring', label: '모니터링', is_selected: true },
                    ] },
                ],
                
                socket_list: [
                    { id: 1, name: 'first' },
                ],
            }
        },
        methods: {
            clickRow(row) { 
                let vm = this;
                vm.select_robot = row; 
                let rcId = row.rcId;
                if(rcId) {
                    axios.get(`/api/record/rc/${rcId}`, {}).then((res) => {
                        let data = res.data;
                        if(data.success) {
                            let row = data.record_list;
                            vm.record_list = row;
                        }
                    });
                } else {
                    let name = row.name;
                    axios.get(`/api/record/rc/name/${name}`, {}).then((res) => {
                        let data = res.data;
                        if(data.success) {
                            let row = data.record_list;
                            vm.record_list = row;
                        }
                    });
                }
            },
            clickTab(row) { 
                let vm = this;
                vm.tab = row.tab;
                vm.select_label = row.label;
            },
            logout() {
                setCookie('token', '');
                window.location.href = '/admin/login';
            },

            delete_rc(row) {
                let vm = this;
                vm.$q.dialog({
                    title: '삭제',
                    message: '정말 삭제하시겠어요?',
                    cancel: true,
                    persistent: true
                }).onOk(() => {
                    continue_delete_rc();
                });

                let rcId = row.rcId;
                function continue_delete_rc() {
                    axios.delete(`/api/rc/${rcId}`, {
                        params: {
                            rcId: row.rcId
                        }
                    }).then((res) => {
                        let data = res.data;
                        if(data.success) {
                            vm.$q.notify({
								icon: 'check',
								color: 'positive',
								message: data.message,
								position: 'top',
							});
                            vm.loadRcList();
                        } else {
                            vm.$q.notify({
								icon: 'error',
								color: 'negative',
								message: data.message,
								position: 'top',
							});
                        }
                    });
                }
                
            },

            set_chart_datas(rc, client, admin) {
                let datas = {
                    labels: [
                        'RC',
                        'CLIENT',
                        'ADMIN'
                    ],
                    datasets: [{
                        label: '접속수',
                        data: [rc,client,admin],
                        backgroundColor: [
                            'rgb(255, 99, 132)',
                            'rgb(54, 162, 235)',
                            'rgb(255, 205, 86)'
                        ],
                        hoverOffset: 40
                    }],
                };
                return datas;
            },

            /* load */
            loadSocketList(type) {
                let vm = this;
                vm.socket_list = [];
                vm.socket.emit('/socket/get/user', {
                }, (data, err) => {
                    let user_dict = data.user_dict;
                    vm.socket_list = [];
                    for(var k in user_dict) {
                        user_dict[k].map((x) => {
                            vm.socket_list.push(x);
                        });
                    }

                    if(type == 'reload') {
                        const ctx = document.getElementById('myChart').remove();
                        //<canvas id="myChart" ref="myChart"></canvas>
                        const newCtx = document.createElement('canvas');
                        newCtx.id = 'myChart';
                        document.getElementById("chart_box").appendChild(newCtx);
                        let datas = vm.set_chart_datas(
                            user_dict.hasOwnProperty('rc') ? user_dict['rc'].length : 0,
                            user_dict.hasOwnProperty('client') ? user_dict['client'].length : 0,
                            user_dict.hasOwnProperty('admin') ? user_dict['admin'].length : 0,
                        );
                        vm.ctx = new Chart(newCtx, {
                            type: 'pie',
                            data: datas,
                        });
                    }

                    let row = user_dict['rc'];
                    let endTime = new Date();

                    row.map((x) => {
                        if(x.connection_time) {
                            let startTime = new Date(x.connection_time);
                            x["connection_time_view"] = `${startTime.getFullYear()}-${startTime.getMonth() > 10 ? startTime.getMonth()+1 : "0"+(startTime.getMonth()+1)}-${startTime.getDate()} ${startTime.getHours()}:${startTime.getMinutes()}:${startTime.getSeconds()}`;
                            let timeDiff = endTime.getTime() - startTime.getTime();
                            timeDiff = timeDiff / 1000;
                            // 분이 되지 못한 정수 값의 초를 얻기위해 % 연산자 사용
                            let seconds = Math.floor(timeDiff % 60);
                            // 결과 값이 한 자리면 0 패딩
                            let secondsAsString = seconds < 10 ? "0" + seconds : seconds;
                            timeDiff = Math.floor(timeDiff / 60);
                            let minutes = timeDiff % 60;
                            // 한자리면 0으로 패딩
                            let minutesAsString = minutes < 10 ? "0" + minutes : minutes;
                            x["time"] = `${minutesAsString}:${secondsAsString}`;
                        }
                    });
                    vm.rc_list = row;
                });
            },
            loadRcList(rc_list) {
                let vm = this;

                axios.get(`/api/rc`, {
                }).then((res) => {
                    let data = res.data;
                    if(data.success) {
                        let row = data.rc_list;
                        vm.rc_data_list = row;
                    }
                });
            }
        },
        mounted() {
            let vm = this;
            vm.height = window.innerHeight;
            window.addEventListener('resize', function(){
                vm.height = window.innerHeight;
            });
            let token = getCookie('token');
            if(!token) { 
                window.location.href = '/admin/login'; 
                return; 
            }

            const socket = io({
                auth: {
                    type: 'admin',
                }
            });

            vm.socket = socket;
            vm.loadSocketList();
            vm.loadRcList();
            

            const ctx = document.getElementById('myChart');
            let datas = vm.set_chart_datas(0,0,0);
            vm.ctx = new Chart(ctx, {
                type: 'pie',
                data: datas,
            });
            
            socket.on('/client/admin/connection', (data) => {
                vm.loadSocketList('reload');
            });
            socket.on('/client/admin/read_image', (data) => {
                let socket = vm.socket_list.find(x=>x.id==data.own);
                socket["image"] = 'data:image/jpeg;base64,' + data.base64;
            });

            setInterval(() => {
                if(vm.rc_list.length > 0) {
                    let row = vm.rc_list;
                    let endTime = new Date();
                    row.map((x) => {
                        if(x.connection_time) {
                            let startTime = new Date(x.connection_time);
                            x["connection_time_view"] = `${startTime.getFullYear()}-${startTime.getMonth() > 10 ? startTime.getMonth()+1 : "0"+(startTime.getMonth()+1)}-${startTime.getDate()} ${startTime.getHours()}:${startTime.getMinutes()}:${startTime.getSeconds()}`;
                            let timeDiff = endTime.getTime() - startTime.getTime();
                            timeDiff = timeDiff / 1000;
                            // 분이 되지 못한 정수 값의 초를 얻기위해 % 연산자 사용
                            let seconds = Math.floor(timeDiff % 60);
                            // 결과 값이 한 자리면 0 패딩
                            let secondsAsString = seconds < 10 ? "0" + seconds : seconds;
                            timeDiff = Math.floor(timeDiff / 60);
                            let minutes = timeDiff % 60;
                            // 한자리면 0으로 패딩
                            let minutesAsString = minutes < 10 ? "0" + minutes : minutes;
                            x["time"] = `${minutesAsString}:${secondsAsString}`;
                        }
                    });
                }
            }, 1000);
        },
    }).use(Quasar).mount('#app');
</script>